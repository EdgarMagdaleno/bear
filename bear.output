Terminals unused in grammar

   SX_PNT
   KW_FNC


State 78 conflicts: 10 shift/reduce
State 79 conflicts: 10 shift/reduce
State 80 conflicts: 10 shift/reduce
State 81 conflicts: 10 shift/reduce
State 82 conflicts: 10 shift/reduce
State 83 conflicts: 10 shift/reduce
State 84 conflicts: 10 shift/reduce
State 85 conflicts: 10 shift/reduce
State 86 conflicts: 10 shift/reduce
State 87 conflicts: 10 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmnt SX_EOS program
    2        | stmnt SX_EOS
    3        | stmnt error SX_EOS program

    4 type: KW_INT
    5     | KW_FLT
    6     | KW_STR

    7 out: KW_OUT exp

    8 stmnt: dec
    9      | asgn
   10      | mod
   11      | if
   12      | while
   13      | out
   14      | for
   15      | output

   16 output: SX_OTP CN_STR

   17 dec: type CN_ID

   18 asgn: dec asgn
   19     | func_dec func_asgn
   20     | OP_ASG exp

   21 func_dec: dec
   22         | type arg_dec CN_ID

   23 func_asgn: SX_CLN program

   24 arg_dec: SX_OPR arg_list SX_CPR

   25 arg_list: %empty
   26         | dec
   27         | dec SX_CMA arg_list

   28 mod: CN_ID OP_ASG exp

   29 exp: CN_INT
   30    | CN_FLT
   31    | CN_ID
   32    | CN_STR
   33    | SX_INP
   34    | SX_OPR exp SX_CPR
   35    | exp OP_ADD exp
   36    | exp OP_SUB exp
   37    | exp OP_MUL exp
   38    | exp OP_DIV exp
   39    | exp OP_EQ exp
   40    | exp OP_NEQ exp
   41    | exp OP_GEQ exp
   42    | exp OP_LEQ exp
   43    | exp OP_GTR exp
   44    | exp OP_LSR exp

   45 if: if_single
   46   | if_single eif_list
   47   | if_single eif_list else
   48   | if_single else

   49 if_single: KW_IF exp SX_CLN program

   50 eif_list: KW_EIF exp SX_CLN program
   51         | KW_EIF exp SX_CLN program eif_list

   52 else: KW_ELS SX_CLN program

   53 while: KW_WHL exp SX_CLN program

   54 for: KW_FOR dec asgn SX_EOS exp SX_EOS mod SX_CLN program


Terminals, with rules where they appear

$end (0) 0
error (256) 3
SX_EOS (258) 1 2 3 54
SX_PNT (259)
SX_CLN (260) 23 49 50 51 52 53 54
SX_CMA (261) 27
SX_OPR (262) 24 34
SX_CPR (263) 24 34
SX_INP (264) 33
SX_OTP (265) 16
CN_INT (266) 29
CN_FLT (267) 30
CN_ID (268) 17 22 28 31
CN_STR (269) 16 32
KW_INT (270) 4
KW_FLT (271) 5
KW_IF (272) 49
KW_FOR (273) 54
KW_EIF (274) 50 51
KW_ELS (275) 52
KW_WHL (276) 53
KW_STR (277) 6
KW_FNC (278)
KW_OUT (279) 7
OP_EQ (280) 39
OP_NEQ (281) 40
OP_GEQ (282) 41
OP_LEQ (283) 42
OP_GTR (284) 43
OP_LSR (285) 44
OP_ASG (286) 20 28
OP_ADD (287) 35
OP_SUB (288) 36
OP_MUL (289) 37
OP_DIV (290) 38


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1 2 3, on right: 0 1 3 23 49 50 51 52 53 54
type (38)
    on left: 4 5 6, on right: 17 22
out (39)
    on left: 7, on right: 13
stmnt (40)
    on left: 8 9 10 11 12 13 14 15, on right: 1 2 3
output (41)
    on left: 16, on right: 15
dec (42)
    on left: 17, on right: 8 18 21 26 27 54
asgn (43)
    on left: 18 19 20, on right: 9 18 54
func_dec (44)
    on left: 21 22, on right: 19
func_asgn (45)
    on left: 23, on right: 19
arg_dec (46)
    on left: 24, on right: 22
arg_list (47)
    on left: 25 26 27, on right: 24 27
mod (48)
    on left: 28, on right: 10 54
exp (49)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44, on right:
    7 20 28 34 35 36 37 38 39 40 41 42 43 44 49 50 51 53 54
if (50)
    on left: 45 46 47 48, on right: 11
if_single (51)
    on left: 49, on right: 45 46 47 48
eif_list (52)
    on left: 50 51, on right: 46 47 51
else (53)
    on left: 52, on right: 47 48
while (54)
    on left: 53, on right: 12
for (55)
    on left: 54, on right: 14


State 0

    0 $accept: . program $end

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    program    go to state 11
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 1

   16 output: SX_OTP . CN_STR

    CN_STR  shift, and go to state 24


State 2

   28 mod: CN_ID . OP_ASG exp

    OP_ASG  shift, and go to state 25


State 3

    4 type: KW_INT .

    $default  reduce using rule 4 (type)


State 4

    5 type: KW_FLT .

    $default  reduce using rule 5 (type)


State 5

   49 if_single: KW_IF . exp SX_CLN program

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 32


State 6

   54 for: KW_FOR . dec asgn SX_EOS exp SX_EOS mod SX_CLN program

    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_STR  shift, and go to state 8

    type  go to state 33
    dec   go to state 34


State 7

   53 while: KW_WHL . exp SX_CLN program

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 35


State 8

    6 type: KW_STR .

    $default  reduce using rule 6 (type)


State 9

    7 out: KW_OUT . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 36


State 10

   20 asgn: OP_ASG . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 37


State 11

    0 $accept: program . $end

    $end  shift, and go to state 38


State 12

   17 dec: type . CN_ID
   22 func_dec: type . arg_dec CN_ID

    SX_OPR  shift, and go to state 39
    CN_ID   shift, and go to state 40

    arg_dec  go to state 41


State 13

   13 stmnt: out .

    $default  reduce using rule 13 (stmnt)


State 14

    1 program: stmnt . SX_EOS program
    2        | stmnt . SX_EOS
    3        | stmnt . error SX_EOS program

    error   shift, and go to state 42
    SX_EOS  shift, and go to state 43


State 15

   15 stmnt: output .

    $default  reduce using rule 15 (stmnt)


State 16

    8 stmnt: dec .
   18 asgn: dec . asgn
   21 func_dec: dec .

    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_STR  shift, and go to state 8
    OP_ASG  shift, and go to state 10

    SX_CLN    reduce using rule 21 (func_dec)
    $default  reduce using rule 8 (stmnt)

    type      go to state 12
    dec       go to state 44
    asgn      go to state 45
    func_dec  go to state 18


State 17

    9 stmnt: asgn .

    $default  reduce using rule 9 (stmnt)


State 18

   19 asgn: func_dec . func_asgn

    SX_CLN  shift, and go to state 46

    func_asgn  go to state 47


State 19

   10 stmnt: mod .

    $default  reduce using rule 10 (stmnt)


State 20

   11 stmnt: if .

    $default  reduce using rule 11 (stmnt)


State 21

   45 if: if_single .
   46   | if_single . eif_list
   47   | if_single . eif_list else
   48   | if_single . else

    KW_EIF  shift, and go to state 48
    KW_ELS  shift, and go to state 49

    $default  reduce using rule 45 (if)

    eif_list  go to state 50
    else      go to state 51


State 22

   12 stmnt: while .

    $default  reduce using rule 12 (stmnt)


State 23

   14 stmnt: for .

    $default  reduce using rule 14 (stmnt)


State 24

   16 output: SX_OTP CN_STR .

    $default  reduce using rule 16 (output)


State 25

   28 mod: CN_ID OP_ASG . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 52


State 26

   34 exp: SX_OPR . exp SX_CPR

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 53


State 27

   33 exp: SX_INP .

    $default  reduce using rule 33 (exp)


State 28

   29 exp: CN_INT .

    $default  reduce using rule 29 (exp)


State 29

   30 exp: CN_FLT .

    $default  reduce using rule 30 (exp)


State 30

   31 exp: CN_ID .

    $default  reduce using rule 31 (exp)


State 31

   32 exp: CN_STR .

    $default  reduce using rule 32 (exp)


State 32

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp
   49 if_single: KW_IF exp . SX_CLN program

    SX_CLN  shift, and go to state 54
    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64


State 33

   17 dec: type . CN_ID

    CN_ID  shift, and go to state 40


State 34

   54 for: KW_FOR dec . asgn SX_EOS exp SX_EOS mod SX_CLN program

    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_STR  shift, and go to state 8
    OP_ASG  shift, and go to state 10

    type      go to state 12
    dec       go to state 44
    asgn      go to state 65
    func_dec  go to state 18


State 35

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp
   53 while: KW_WHL exp . SX_CLN program

    SX_CLN  shift, and go to state 66
    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64


State 36

    7 out: KW_OUT exp .
   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    $default  reduce using rule 7 (out)


State 37

   20 asgn: OP_ASG exp .
   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    $default  reduce using rule 20 (asgn)


State 38

    0 $accept: program $end .

    $default  accept


State 39

   24 arg_dec: SX_OPR . arg_list SX_CPR

    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_STR  shift, and go to state 8

    $default  reduce using rule 25 (arg_list)

    type      go to state 33
    dec       go to state 67
    arg_list  go to state 68


State 40

   17 dec: type CN_ID .

    $default  reduce using rule 17 (dec)


State 41

   22 func_dec: type arg_dec . CN_ID

    CN_ID  shift, and go to state 69


State 42

    3 program: stmnt error . SX_EOS program

    SX_EOS  shift, and go to state 70


State 43

    1 program: stmnt SX_EOS . program
    2        | stmnt SX_EOS .

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    $default  reduce using rule 2 (program)

    program    go to state 71
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 44

   18 asgn: dec . asgn
   21 func_dec: dec .

    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_STR  shift, and go to state 8
    OP_ASG  shift, and go to state 10

    $default  reduce using rule 21 (func_dec)

    type      go to state 12
    dec       go to state 44
    asgn      go to state 45
    func_dec  go to state 18


State 45

   18 asgn: dec asgn .

    $default  reduce using rule 18 (asgn)


State 46

   23 func_asgn: SX_CLN . program

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    program    go to state 72
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 47

   19 asgn: func_dec func_asgn .

    $default  reduce using rule 19 (asgn)


State 48

   50 eif_list: KW_EIF . exp SX_CLN program
   51         | KW_EIF . exp SX_CLN program eif_list

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 73


State 49

   52 else: KW_ELS . SX_CLN program

    SX_CLN  shift, and go to state 74


State 50

   46 if: if_single eif_list .
   47   | if_single eif_list . else

    KW_ELS  shift, and go to state 49

    $default  reduce using rule 46 (if)

    else  go to state 75


State 51

   48 if: if_single else .

    $default  reduce using rule 48 (if)


State 52

   28 mod: CN_ID OP_ASG exp .
   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    $default  reduce using rule 28 (mod)


State 53

   34 exp: SX_OPR exp . SX_CPR
   35    | exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    SX_CPR  shift, and go to state 76
    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64


State 54

   49 if_single: KW_IF exp SX_CLN . program

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    program    go to state 77
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 55

   39 exp: exp OP_EQ . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 78


State 56

   40 exp: exp OP_NEQ . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 79


State 57

   41 exp: exp OP_GEQ . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 80


State 58

   42 exp: exp OP_LEQ . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 81


State 59

   43 exp: exp OP_GTR . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 82


State 60

   44 exp: exp OP_LSR . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 83


State 61

   35 exp: exp OP_ADD . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 84


State 62

   36 exp: exp OP_SUB . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 85


State 63

   37 exp: exp OP_MUL . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 86


State 64

   38 exp: exp OP_DIV . exp

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 87


State 65

   54 for: KW_FOR dec asgn . SX_EOS exp SX_EOS mod SX_CLN program

    SX_EOS  shift, and go to state 88


State 66

   53 while: KW_WHL exp SX_CLN . program

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    program    go to state 89
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 67

   26 arg_list: dec .
   27         | dec . SX_CMA arg_list

    SX_CMA  shift, and go to state 90

    $default  reduce using rule 26 (arg_list)


State 68

   24 arg_dec: SX_OPR arg_list . SX_CPR

    SX_CPR  shift, and go to state 91


State 69

   22 func_dec: type arg_dec CN_ID .

    $default  reduce using rule 22 (func_dec)


State 70

    3 program: stmnt error SX_EOS . program

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    program    go to state 92
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 71

    1 program: stmnt SX_EOS program .

    $default  reduce using rule 1 (program)


State 72

   23 func_asgn: SX_CLN program .

    $default  reduce using rule 23 (func_asgn)


State 73

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp
   50 eif_list: KW_EIF exp . SX_CLN program
   51         | KW_EIF exp . SX_CLN program eif_list

    SX_CLN  shift, and go to state 93
    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64


State 74

   52 else: KW_ELS SX_CLN . program

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    program    go to state 94
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 75

   47 if: if_single eif_list else .

    $default  reduce using rule 47 (if)


State 76

   34 exp: SX_OPR exp SX_CPR .

    $default  reduce using rule 34 (exp)


State 77

   49 if_single: KW_IF exp SX_CLN program .

    $default  reduce using rule 49 (if_single)


State 78

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   39    | exp OP_EQ exp .
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 39 (exp)]
    OP_NEQ    [reduce using rule 39 (exp)]
    OP_GEQ    [reduce using rule 39 (exp)]
    OP_LEQ    [reduce using rule 39 (exp)]
    OP_GTR    [reduce using rule 39 (exp)]
    OP_LSR    [reduce using rule 39 (exp)]
    OP_ADD    [reduce using rule 39 (exp)]
    OP_SUB    [reduce using rule 39 (exp)]
    OP_MUL    [reduce using rule 39 (exp)]
    OP_DIV    [reduce using rule 39 (exp)]
    $default  reduce using rule 39 (exp)


State 79

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   40    | exp OP_NEQ exp .
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 40 (exp)]
    OP_NEQ    [reduce using rule 40 (exp)]
    OP_GEQ    [reduce using rule 40 (exp)]
    OP_LEQ    [reduce using rule 40 (exp)]
    OP_GTR    [reduce using rule 40 (exp)]
    OP_LSR    [reduce using rule 40 (exp)]
    OP_ADD    [reduce using rule 40 (exp)]
    OP_SUB    [reduce using rule 40 (exp)]
    OP_MUL    [reduce using rule 40 (exp)]
    OP_DIV    [reduce using rule 40 (exp)]
    $default  reduce using rule 40 (exp)


State 80

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   41    | exp OP_GEQ exp .
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 41 (exp)]
    OP_NEQ    [reduce using rule 41 (exp)]
    OP_GEQ    [reduce using rule 41 (exp)]
    OP_LEQ    [reduce using rule 41 (exp)]
    OP_GTR    [reduce using rule 41 (exp)]
    OP_LSR    [reduce using rule 41 (exp)]
    OP_ADD    [reduce using rule 41 (exp)]
    OP_SUB    [reduce using rule 41 (exp)]
    OP_MUL    [reduce using rule 41 (exp)]
    OP_DIV    [reduce using rule 41 (exp)]
    $default  reduce using rule 41 (exp)


State 81

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   42    | exp OP_LEQ exp .
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 42 (exp)]
    OP_NEQ    [reduce using rule 42 (exp)]
    OP_GEQ    [reduce using rule 42 (exp)]
    OP_LEQ    [reduce using rule 42 (exp)]
    OP_GTR    [reduce using rule 42 (exp)]
    OP_LSR    [reduce using rule 42 (exp)]
    OP_ADD    [reduce using rule 42 (exp)]
    OP_SUB    [reduce using rule 42 (exp)]
    OP_MUL    [reduce using rule 42 (exp)]
    OP_DIV    [reduce using rule 42 (exp)]
    $default  reduce using rule 42 (exp)


State 82

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   43    | exp OP_GTR exp .
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 43 (exp)]
    OP_NEQ    [reduce using rule 43 (exp)]
    OP_GEQ    [reduce using rule 43 (exp)]
    OP_LEQ    [reduce using rule 43 (exp)]
    OP_GTR    [reduce using rule 43 (exp)]
    OP_LSR    [reduce using rule 43 (exp)]
    OP_ADD    [reduce using rule 43 (exp)]
    OP_SUB    [reduce using rule 43 (exp)]
    OP_MUL    [reduce using rule 43 (exp)]
    OP_DIV    [reduce using rule 43 (exp)]
    $default  reduce using rule 43 (exp)


State 83

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp
   44    | exp OP_LSR exp .

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 44 (exp)]
    OP_NEQ    [reduce using rule 44 (exp)]
    OP_GEQ    [reduce using rule 44 (exp)]
    OP_LEQ    [reduce using rule 44 (exp)]
    OP_GTR    [reduce using rule 44 (exp)]
    OP_LSR    [reduce using rule 44 (exp)]
    OP_ADD    [reduce using rule 44 (exp)]
    OP_SUB    [reduce using rule 44 (exp)]
    OP_MUL    [reduce using rule 44 (exp)]
    OP_DIV    [reduce using rule 44 (exp)]
    $default  reduce using rule 44 (exp)


State 84

   35 exp: exp . OP_ADD exp
   35    | exp OP_ADD exp .
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 35 (exp)]
    OP_NEQ    [reduce using rule 35 (exp)]
    OP_GEQ    [reduce using rule 35 (exp)]
    OP_LEQ    [reduce using rule 35 (exp)]
    OP_GTR    [reduce using rule 35 (exp)]
    OP_LSR    [reduce using rule 35 (exp)]
    OP_ADD    [reduce using rule 35 (exp)]
    OP_SUB    [reduce using rule 35 (exp)]
    OP_MUL    [reduce using rule 35 (exp)]
    OP_DIV    [reduce using rule 35 (exp)]
    $default  reduce using rule 35 (exp)


State 85

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   36    | exp OP_SUB exp .
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 36 (exp)]
    OP_NEQ    [reduce using rule 36 (exp)]
    OP_GEQ    [reduce using rule 36 (exp)]
    OP_LEQ    [reduce using rule 36 (exp)]
    OP_GTR    [reduce using rule 36 (exp)]
    OP_LSR    [reduce using rule 36 (exp)]
    OP_ADD    [reduce using rule 36 (exp)]
    OP_SUB    [reduce using rule 36 (exp)]
    OP_MUL    [reduce using rule 36 (exp)]
    OP_DIV    [reduce using rule 36 (exp)]
    $default  reduce using rule 36 (exp)


State 86

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   37    | exp OP_MUL exp .
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 37 (exp)]
    OP_NEQ    [reduce using rule 37 (exp)]
    OP_GEQ    [reduce using rule 37 (exp)]
    OP_LEQ    [reduce using rule 37 (exp)]
    OP_GTR    [reduce using rule 37 (exp)]
    OP_LSR    [reduce using rule 37 (exp)]
    OP_ADD    [reduce using rule 37 (exp)]
    OP_SUB    [reduce using rule 37 (exp)]
    OP_MUL    [reduce using rule 37 (exp)]
    OP_DIV    [reduce using rule 37 (exp)]
    $default  reduce using rule 37 (exp)


State 87

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   38    | exp OP_DIV exp .
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp

    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64

    OP_EQ     [reduce using rule 38 (exp)]
    OP_NEQ    [reduce using rule 38 (exp)]
    OP_GEQ    [reduce using rule 38 (exp)]
    OP_LEQ    [reduce using rule 38 (exp)]
    OP_GTR    [reduce using rule 38 (exp)]
    OP_LSR    [reduce using rule 38 (exp)]
    OP_ADD    [reduce using rule 38 (exp)]
    OP_SUB    [reduce using rule 38 (exp)]
    OP_MUL    [reduce using rule 38 (exp)]
    OP_DIV    [reduce using rule 38 (exp)]
    $default  reduce using rule 38 (exp)


State 88

   54 for: KW_FOR dec asgn SX_EOS . exp SX_EOS mod SX_CLN program

    SX_OPR  shift, and go to state 26
    SX_INP  shift, and go to state 27
    CN_INT  shift, and go to state 28
    CN_FLT  shift, and go to state 29
    CN_ID   shift, and go to state 30
    CN_STR  shift, and go to state 31

    exp  go to state 95


State 89

   53 while: KW_WHL exp SX_CLN program .

    $default  reduce using rule 53 (while)


State 90

   27 arg_list: dec SX_CMA . arg_list

    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_STR  shift, and go to state 8

    $default  reduce using rule 25 (arg_list)

    type      go to state 33
    dec       go to state 67
    arg_list  go to state 96


State 91

   24 arg_dec: SX_OPR arg_list SX_CPR .

    $default  reduce using rule 24 (arg_dec)


State 92

    3 program: stmnt error SX_EOS program .

    $default  reduce using rule 3 (program)


State 93

   50 eif_list: KW_EIF exp SX_CLN . program
   51         | KW_EIF exp SX_CLN . program eif_list

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    program    go to state 97
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 94

   52 else: KW_ELS SX_CLN program .

    $default  reduce using rule 52 (else)


State 95

   35 exp: exp . OP_ADD exp
   36    | exp . OP_SUB exp
   37    | exp . OP_MUL exp
   38    | exp . OP_DIV exp
   39    | exp . OP_EQ exp
   40    | exp . OP_NEQ exp
   41    | exp . OP_GEQ exp
   42    | exp . OP_LEQ exp
   43    | exp . OP_GTR exp
   44    | exp . OP_LSR exp
   54 for: KW_FOR dec asgn SX_EOS exp . SX_EOS mod SX_CLN program

    SX_EOS  shift, and go to state 98
    OP_EQ   shift, and go to state 55
    OP_NEQ  shift, and go to state 56
    OP_GEQ  shift, and go to state 57
    OP_LEQ  shift, and go to state 58
    OP_GTR  shift, and go to state 59
    OP_LSR  shift, and go to state 60
    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62
    OP_MUL  shift, and go to state 63
    OP_DIV  shift, and go to state 64


State 96

   27 arg_list: dec SX_CMA arg_list .

    $default  reduce using rule 27 (arg_list)


State 97

   50 eif_list: KW_EIF exp SX_CLN program .
   51         | KW_EIF exp SX_CLN program . eif_list

    KW_EIF  shift, and go to state 48

    $default  reduce using rule 50 (eif_list)

    eif_list  go to state 99


State 98

   54 for: KW_FOR dec asgn SX_EOS exp SX_EOS . mod SX_CLN program

    CN_ID  shift, and go to state 2

    mod  go to state 100


State 99

   51 eif_list: KW_EIF exp SX_CLN program eif_list .

    $default  reduce using rule 51 (eif_list)


State 100

   54 for: KW_FOR dec asgn SX_EOS exp SX_EOS mod . SX_CLN program

    SX_CLN  shift, and go to state 101


State 101

   54 for: KW_FOR dec asgn SX_EOS exp SX_EOS mod SX_CLN . program

    SX_OTP  shift, and go to state 1
    CN_ID   shift, and go to state 2
    KW_INT  shift, and go to state 3
    KW_FLT  shift, and go to state 4
    KW_IF   shift, and go to state 5
    KW_FOR  shift, and go to state 6
    KW_WHL  shift, and go to state 7
    KW_STR  shift, and go to state 8
    KW_OUT  shift, and go to state 9
    OP_ASG  shift, and go to state 10

    program    go to state 102
    type       go to state 12
    out        go to state 13
    stmnt      go to state 14
    output     go to state 15
    dec        go to state 16
    asgn       go to state 17
    func_dec   go to state 18
    mod        go to state 19
    if         go to state 20
    if_single  go to state 21
    while      go to state 22
    for        go to state 23


State 102

   54 for: KW_FOR dec asgn SX_EOS exp SX_EOS mod SX_CLN program .

    $default  reduce using rule 54 (for)
